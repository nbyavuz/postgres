# CI configuration file for CI utilizing cirrus-ci.org
#
# For instructions on how to enable the CI integration in a repository and
# further details, see src/tools/ci/README


env:
  # Source of images / containers
  GCP_PROJECT: pg-ci-images
  IMAGE_PROJECT: $GCP_PROJECT
  CONTAINER_REPO: us-docker.pkg.dev/${GCP_PROJECT}/ci

  # The lower depth accelerates git clone. Use a bit of depth so that
  # concurrent tasks and retrying older jobs has a chance of working.
  CIRRUS_CLONE_DEPTH: 500
  # Useful to be able to analyse what in a script takes long
  CIRRUS_LOG_TIMESTAMP: true

  CCACHE_MAXSIZE: "250M"

  # target to test, for all but windows
  CHECK: check-world PROVE_FLAGS=$PROVE_FLAGS
  CHECKFLAGS: -Otarget
  PROVE_FLAGS: --timer
  MTEST_ARGS: --print-errorlogs --no-rebuild -C build
  PGCTLTIMEOUT: 120 # avoids spurious failures during parallel tests
  TEMP_CONFIG: ${CIRRUS_WORKING_DIR}/src/tools/ci/pg_ci_base.conf
  PG_TEST_EXTRA: kerberos ldap ssl


# What files to preserve in case tests fail
on_failure_ac: &on_failure_ac
  log_artifacts:
    paths:
      - "**/*.log"
      - "**/*.diffs"
      - "**/regress_log_*"
    type: text/plain

on_failure_meson: &on_failure_meson
  testrun_artifacts:
    paths:
      - "build*/testrun/**/*.log"
      - "build*/testrun/**/*.diffs"
      - "build*/testrun/**/regress_log_*"
    type: text/plain

  # In theory it'd be nice to upload the junit files meson generates, so that
  # cirrus will nicely annotate the commit. Unfortunately the files don't
  # contain identifieable file + line numbers right now, so the annotations
  # don't end up useful. We could probably improve on that with a some custom
  # conversion script, but ...
  meson_log_artifacts:
    path: "build*/meson-logs/*.txt"
    type: text/plain


task:
  name: FreeBSD - 13 - Meson

  env:
    # FreeBSD on GCP is slow when running with larger number of CPUS /
    # jobs. Using one more job than cpus seems to work best.
    CPUS: 2
    BUILD_JOBS: 3
    TEST_JOBS: 3

    CCACHE_DIR: /tmp/ccache_dir
    CPPFLAGS: -DRELCACHE_FORCE_RELEASE -DCOPY_PARSE_PLAN_TREES -DWRITE_READ_PARSE_PLAN_TREES -DRAW_EXPRESSION_COVERAGE_TEST
    CFLAGS: -Og -ggdb

  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*freebsd.*'

  compute_engine_instance:
    image_project: $IMAGE_PROJECT
    image: family/pg-ci-freebsd-13
    platform: freebsd
    cpu: $CPUS
    memory: 4G
    disk: 50

  sysinfo_script: |
    id
    uname -a
    ulimit -a -H && ulimit -a -S
    export

  ccache_cache:
    folder: $CCACHE_DIR
  # Workaround around performance issues due to 32KB block size
  repartition_script: src/tools/ci/gcp_freebsd_repartition.sh
  create_user_script: |
    pw useradd postgres
    chown -R postgres:postgres .
    mkdir -p ${CCACHE_DIR}
    chown -R postgres:postgres ${CCACHE_DIR}
  setup_core_files_script: |
    mkdir -m 770 /tmp/cores
    chown root:postgres /tmp/cores
    sysctl kern.corefile='/tmp/cores/%N.%P.core'
  setup_additional_packages_script: |
    #pkg install -y ...

  # NB: Intentionally build without -Dllvm. The freebsd image size is already
  # large enough to make VM startup slow, and even without llvm freebsd
  # already takes longer than other platforms except for windows.
  configure_script: |
    su postgres <<-EOF
      meson setup \
        --buildtype=debug \
        -Dcassert=true -Dssl=openssl -Duuid=bsd -Dtcl_version=tcl86 -Ddtrace=auto \
        -DPG_TEST_EXTRA="$PG_TEST_EXTRA" \
        -Dextra_lib_dirs=/usr/local/lib -Dextra_include_dirs=/usr/local/include/ \
        build
    EOF
  build_script: su postgres -c 'ninja -C build -j${BUILD_JOBS}'
  upload_caches: ccache

  test_world_script: |
    su postgres <<-EOF
      ulimit -c unlimited
      meson test $MTEST_ARGS --num-processes ${TEST_JOBS}
    EOF

  # test runningcheck, freebsd chosen because it's currently fast enough
  test_running_script: |
    su postgres <<-EOF
      set -e
      ulimit -c unlimited
      meson test $MTEST_ARGS --quiet --suite setup
      export LD_LIBRARY_PATH="$(pwd)/build/tmp_install/usr/local/pgsql/lib/:$LD_LIBRARY_PATH"
      mkdir -p build/testrun
      build/tmp_install/usr/local/pgsql/bin/initdb -N build/runningcheck --no-instructions -A trust
      echo "include '$(pwd)/src/tools/ci/pg_ci_base.conf'" >> build/runningcheck/postgresql.conf
      build/tmp_install/usr/local/pgsql/bin/pg_ctl -c -o '-c fsync=off' -D build/runningcheck -l build/testrun/runningcheck.log start
      meson test $MTEST_ARGS --num-processes ${TEST_JOBS} --setup running
      build/tmp_install/usr/local/pgsql/bin/pg_ctl -D build/runningcheck stop
    EOF

  on_failure:
    <<: *on_failure_meson
    cores_script: src/tools/ci/cores_backtrace.sh freebsd /tmp/cores


task:
  env:
    CPUS: 2
    BUILD_JOBS: 3
    TEST_JOBS: 3

    CIRRUS_WORKING_DIR: /home/postgres/postgres
    CCACHE_DIR: /tmp/ccache_dir

    PATH: /usr/sbin:$PATH

    # Postgres interprets LANG as a 'en_US.UTF-8' but it is 'C', then
    # Postgres tries to set 'LC_COLLATE' to 'en_US.UTF-8' but it is not
    # changeable. Initdb fails because of that. So, LANG is forced to be 'C'.
    LANG: "C"
    LC_ALL: "C"

  matrix:
    - name: NetBSD - 9 - Meson
      only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*netbsd.*'
      env:
        IMAGE_NAME: pg-ci-netbsd-9-postgres
        PLATFORM: netbsd
        INCLUDE_DIRS: -Dextra_lib_dirs=/usr/pkg/lib -Dextra_include_dirs=/usr/pkg/include

    - name: OpenBSD - 7 - Meson
      only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*openbsd.*'
      env:
        IMAGE_NAME: pg-ci-openbsd-7-postgres
        PLATFORM: openbsd
        INCLUDE_DIRS: -Dextra_include_dirs=/usr/local/include -Dextra_lib_dirs=/usr/local/lib
        UUID: -Duuid=e2fs

  compute_engine_instance:
    image_project: $IMAGE_PROJECT
    image: family/${IMAGE_NAME}
    platform: ${PLATFORM}
    cpu: $CPUS
    memory: 4G
    disk: 25

  sysinfo_script: |
    locale
    id
    uname -a
    ulimit -a -H && ulimit -a -S
    export

  ccache_cache:
    folder: $CCACHE_DIR

  create_user_script: |
    useradd postgres
    chown -R postgres:users /home/postgres
    mkdir -p ${CCACHE_DIR}
    chown -R postgres:users ${CCACHE_DIR}

  # -Duuid=bsd is not set since 'bsd' uuid option
  # is not working on netBSD & openBSD. See
  # https://www.postgresql.org/message-id/17358-89806e7420797025@postgresql.org
  # And other uuid options are not available on netBSD
  configure_script: |
    su postgres <<-EOF
      meson setup \
        --buildtype debug \
        -Dcassert=true -Dssl=openssl ${UUID} \
        -DPG_TEST_EXTRA="$PG_TEST_EXTRA" \
        ${INCLUDE_DIRS} \
        build
    EOF

  build_script: su postgres -c 'ninja -C build -j${BUILD_JOBS}'
  upload_caches: ccache

  test_world_script: |
    su postgres <<-EOF
      ulimit -c unlimited
      meson test $MTEST_ARGS --num-processes ${TEST_JOBS}
    EOF

  on_failure:
    <<: *on_failure_meson


# configure feature flags, shared between the task running the linux tests and
# the CompilerWarnings task
LINUX_CONFIGURE_FEATURES: &LINUX_CONFIGURE_FEATURES >-
  --with-gssapi
  --with-icu
  --with-ldap
  --with-libxml
  --with-libxslt
  --with-llvm
  --with-lz4
  --with-pam
  --with-perl
  --with-python
  --with-selinux
  --with-ssl=openssl
  --with-systemd
  --with-tcl --with-tclconfig=/usr/lib/tcl8.6/
  --with-uuid=ossp
  --with-zstd

LINUX_MESON_FEATURES: &LINUX_MESON_FEATURES >-
  -Dllvm=enabled
  -Dssl=openssl
  -Duuid=e2fs


# configure preparation scripts, shared between tasks running the linux tests
linux_preparation_scripts_template: &linux_preparation_scripts_template
  sysinfo_script: |
    id
    uname -a
    cat /proc/cmdline
    ulimit -a -H && ulimit -a -S
    export
  create_user_script: |
    useradd -m -U postgres
    chown -R postgres:postgres .
    mkdir -p ${CCACHE_DIR}
    chown -R postgres:postgres ${CCACHE_DIR}
    su postgres -c "ulimit -l -H && ulimit -l -S"


task:
  env:
    CPUS: 4
    BUILD_JOBS: 4
    TEST_JOBS: 8 # experimentally derived to be a decent choice

    CCACHE_DIR: /tmp/ccache_dir
    DEBUGINFOD_URLS: "https://debuginfod.debian.net"

    CFLAGS: -Og -ggdb
    CXXFLAGS: -Og -ggdb
    CC: ccache gcc
    CXX: ccache g++

    LINUX_CONFIGURE_FEATURES: *LINUX_CONFIGURE_FEATURES
    LINUX_MESON_FEATURES: *LINUX_MESON_FEATURES

  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*linux.*'

  compute_engine_instance:
    image_project: $IMAGE_PROJECT
    image: family/pg-ci-bullseye
    platform: linux
    cpu: $CPUS
    memory: 4G

  ccache_cache:
    folder: ${CCACHE_DIR}

  set_limits_script: |
    echo '* - memlock 134217728' > /etc/security/limits.d/postgres.conf
  <<: *linux_preparation_scripts_template
  setup_core_files_script: |
    mkdir -m 770 /tmp/cores
    chown root:postgres /tmp/cores
    sysctl kernel.core_pattern='/tmp/cores/%e-%s-%p.core'
  setup_additional_packages_script: |
    #apt-get update
    #DEBIAN_FRONTEND=noninteractive apt-get -y install ...

  matrix:
    - name: Linux - Debian Bullseye - Autoconf

      configure_script: |
        su postgres <<-EOF
          ./configure \
            --enable-cassert --enable-debug --enable-tap-tests \
            --enable-nls \
            \
            ${LINUX_CONFIGURE_FEATURES} \
            \
            CLANG="ccache clang"
        EOF
      build_script: su postgres -c "make -s -j${BUILD_JOBS} world-bin"
      upload_caches: ccache

      test_world_script: |
        su postgres <<-EOF
          ulimit -c unlimited # default is 0
          make -s ${CHECK} ${CHECKFLAGS} -j${TEST_JOBS}
        EOF

      on_failure:
        <<: *on_failure_ac

    - matrix:
        - name: Linux - Debian Bullseye - Meson
        - name: Linux - Debian Sid - Meson
          trigger_type: manual

          compute_engine_instance:
            image: family/pg-ci-sid

      env:
        CCACHE_MAXSIZE: "400M" # tests two different builds

      configure_script: |
        su postgres <<-EOF
          meson setup \
            --buildtype=debug \
            -Dcassert=true \
            ${LINUX_MESON_FEATURES} \
            -DPG_TEST_EXTRA="$PG_TEST_EXTRA" \
            build
        EOF

      # Also build & test in a 32bit build - it's gotten rare to test that
      # locally.
      configure_32_script: |
        su postgres <<-EOF
          export CC='ccache gcc -m32'
          meson setup \
            --buildtype=debug \
            -Dcassert=true \
            ${LINUX_MESON_FEATURES} \
            -Dllvm=disabled \
            --pkg-config-path /usr/lib/i386-linux-gnu/pkgconfig/ \
            -DPERL=perl5.32-i386-linux-gnu \
            -DPG_TEST_EXTRA="$PG_TEST_EXTRA" \
            build-32
        EOF

      build_script: su postgres -c 'ninja -C build -j${BUILD_JOBS}'
      build_32_script: su postgres -c 'ninja -C build-32 -j${BUILD_JOBS}'

      upload_caches: ccache

      test_world_script: |
        su postgres <<-EOF
          ulimit -c unlimited
          meson test $MTEST_ARGS --num-processes ${TEST_JOBS}
        EOF
        # so that we don't upload 64bit logs if 32bit fails
        rm -rf build/

      # There's currently no coverage of icu with LANG=C in the buildfarm. We
      # can easily provide some here by running one of the sets of tests that
      # way. Newer versions of python insist on changing the LC_CTYPE away
      # from C, prevent that with PYTHONCOERCECLOCALE.
      test_world_32_script: |
        su postgres <<-EOF
          ulimit -c unlimited
          PYTHONCOERCECLOCALE=0 LANG=C meson test $MTEST_ARGS -C build-32 --num-processes ${TEST_JOBS}
        EOF

      on_failure:
        <<: *on_failure_meson

  on_failure:
    cores_script: src/tools/ci/cores_backtrace.sh linux /tmp/cores


task:
  env:
    CPUS: 4
    BUILD_JOBS: 4
    TEST_JOBS: 8 # experimentally derived to be a decent choice

    CCACHE_DIR: /tmp/ccache_dir
    DEBUGINFOD_URLS: ${DEBUGINFO}

    TCL_DIR: /usr/lib64/
    UUID: e2fs

    CFLAGS: "-Og -ggdb"
    CXXFLAGS: "-Og -ggdb"

    LINUX_CONFIGURE_FEATURES: *LINUX_CONFIGURE_FEATURES

  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*linux.*'

  container:
    dockerfile: ${DOCKERFILE_PATH}
    cpu: $CPUS
    memory: 4G

  ccache_cache:
    folder: ${CCACHE_DIR}

  <<: *linux_preparation_scripts_template

  matrix:
    - name: Linux - OpenSuse Tumbleweed (LLVM) - Meson
      env:
        DOCKERFILE_PATH: src/tools/ci/docker/linux_opensuse_tumbleweed
        DEBUGINFO: "https://debuginfod.opensuse.org/"
        LLVM: -Dllvm=enabled

    - trigger_type: manual
      matrix:
        - name: Linux - Fedora Rawhide - Meson
          env:
            DOCKERFILE_PATH: src/tools/ci/docker/linux_fedora_rawhide
            DEBUGINFO: "https://debuginfod.fedoraproject.org/"

        - name: Linux - Centos 8 - Meson
          env:
            DOCKERFILE_PATH: src/tools/ci/docker/linux_centos8
            DEBUGINFO: "http://debuginfo.centos.org/"

        - name: Linux - Centos 7 - Meson
          env:
            DOCKERFILE_PATH: src/tools/ci/docker/linux_centos7
            DEBUGINFO: "http://debuginfo.centos.org/"

  configure_script: |
    su postgres <<-EOF
      meson setup \
        --buildtype debug \
        -Dcassert=true -Dssl=openssl -Duuid=e2fs ${LLVM} \
        -DPG_TEST_EXTRA="$PG_TEST_EXTRA" \
        build
    EOF

  build_script: su postgres -c 'ninja -C build -j${BUILD_JOBS}'
  upload_caches: ccache

  test_world_script: |
    su postgres <<-EOF
      ulimit -c unlimited
      meson test $MTEST_ARGS --num-processes ${TEST_JOBS}
    EOF

  on_failure:
    <<: *on_failure_meson


task:
  name: macOS - Monterey - Meson

  env:
    CPUS: 12 # always get that much for cirrusci macOS instances
    BUILD_JOBS: $CPUS
    # Test performance regresses noticably when using all cores. 8 seems to
    # work OK. See
    # https://postgr.es/m/20220927040208.l3shfcidovpzqxfh%40awork3.anarazel.de
    TEST_JOBS: 8

    CIRRUS_WORKING_DIR: ${HOME}/pgsql/
    CCACHE_DIR: ${HOME}/ccache
    HOMEBREW_CACHE: ${HOME}/homebrew-cache
    PERL5LIB: ${HOME}/perl5/lib/perl5

    CC: ccache cc
    CXX: ccache c++
    CPPFLAGS: -DRANDOMIZE_ALLOCATED_MEMORY
    CFLAGS: -Og -ggdb
    CXXFLAGS: -Og -ggdb

  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*(macos|darwin|osx).*'

  osx_instance:
    image: monterey-base

  sysinfo_script: |
    id
    uname -a
    ulimit -a -H && ulimit -a -S
    export

  setup_core_files_script:
    - mkdir ${HOME}/cores
    - sudo sysctl kern.corefile="${HOME}/cores/core.%P"

  perl_cache:
    folder: ~/perl5
  cpan_install_script:
    - perl -mIPC::Run -e 1 || cpan -T IPC::Run
    - perl -mIO::Pty -e 1 || cpan -T IO::Pty
  upload_caches: perl


  # XXX: Could we instead install homebrew into a cached directory? The
  # homebrew installation takes a good bit of time every time, even if the
  # packages do not need to be downloaded.
  homebrew_cache:
    folder: $HOMEBREW_CACHE
  setup_additional_packages_script: |
    brew install \
      ccache \
      icu4c \
      krb5 \
      llvm \
      lz4 \
      make \
      meson \
      openldap \
      openssl \
      python \
      tcl-tk \
      zstd

    brew cleanup -s # to reduce cache size
  upload_caches: homebrew

  ccache_cache:
    folder: $CCACHE_DIR
  configure_script: |
    brewpath="/usr/local"
    PKG_CONFIG_PATH="${brewpath}/lib/pkgconfig:${PKG_CONFIG_PATH}"

    for pkg in icu4c krb5 openldap openssl zstd ; do
      pkgpath="${brewpath}/opt/${pkg}"
      PKG_CONFIG_PATH="${pkgpath}/lib/pkgconfig:${PKG_CONFIG_PATH}"
      PATH="${pkgpath}/bin:${pkgpath}/sbin:$PATH"
    done

    export PKG_CONFIG_PATH PATH

    meson setup \
      --buildtype=debug \
      -Dextra_include_dirs=${brewpath}/include \
      -Dextra_lib_dirs=${brewpath}/lib \
      -Dcassert=true \
      -Dssl=openssl -Duuid=e2fs -Ddtrace=auto \
      -DPG_TEST_EXTRA="$PG_TEST_EXTRA" \
      build

  build_script: ninja -C build -j${BUILD_JOBS}
  upload_caches: ccache

  test_world_script: |
    ulimit -c unlimited # default is 0
    ulimit -n 1024 # default is 256, pretty low
    meson test $MTEST_ARGS --num-processes ${TEST_JOBS}

  on_failure:
    <<: *on_failure_meson
    cores_script: src/tools/ci/cores_backtrace.sh macos "${HOME}/cores"


windows_template: &windows_template
  env:
    # Half the allowed per-user CPU cores
    CPUS: 4
    TEST_JOBS: 8 # wild guess, data based value welcome

    # The default cirrus working dir is in a directory msbuild complains about
    CIRRUS_WORKING_DIR: "c:/cirrus"
    # Avoid re-installing over and over
    NO_TEMP_INSTALL: 1
    # git's tar doesn't deal with drive letters, see
    # https://postgr.es/m/b6782dc3-a7b0-ed56-175f-f8f54cb08d67%40dunslane.net
    TAR: "c:/windows/system32/tar.exe"
    # Avoids port conflicts between concurrent tap test runs
    PG_TEST_USE_UNIX_SOCKETS: 1
    PG_REGRESS_SOCK_DIR: "c:/cirrus/"
    # -m enables parallelism
    # verbosity:minimal + Summary reduce verbosity, while keeping a summary of
    #   errors/warnings
    # ForceNoAlign prevents msbuild from introducing line-breaks for long lines
    # disable file tracker, we're never going to rebuild, and it slows down the
    #   build
    MSBFLAGS: -m -verbosity:minimal "-consoleLoggerParameters:Summary;ForceNoAlign" /p:TrackFileAccess=false -nologo

    # If tests hang forever, cirrus eventually times out. In that case log
    # output etc is not uploaded, making the problem hard to debug. Of course
    # tests internally should have shorter timeouts, but that's proven to not
    # be sufficient. 15min currently is fast enough to finish individual test
    # "suites".
    T_C: "\"C:/Program Files/Git/usr/bin/timeout.exe\" -v -k60s 15m"

    # startcreate_script starts a postgres instance that we don't want to get
    # killed at the end of that script (it's stopped in stop_script). Can't
    # trivially use background_scripts because a) need pg_ctl's dropping of
    # permissions b) need to wait for startup to have finished, and we don't
    # currently have a tool for that...
    CIRRUS_ESCAPING_PROCESSES: 1

    # Cirrus defaults to SetErrorMode(SEM_NOGPFAULTERRORBOX | ...). That
    # prevents crash reporting from working unless binaries do SetErrorMode()
    # themselves. Furthermore, it appears that either python or, more likely,
    # the C runtime has a bug where SEM_NOGPFAULTERRORBOX can very
    # occasionally *trigger* a crash on process exit - which is hard to debug,
    # given that it explicitly prevents crash dumps from working...
    # 0x8001 is SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX
    CIRRUS_WINDOWS_ERROR_MODE: 0x8001

  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*windows.*'

  compute_engine_instance:
    image_project: pg-ci-images-dev
    image: family/pg-ci-windows-vs-2019
    platform: windows
    cpu: $CPUS
    memory: 4G
    disk: 50

  sysinfo_script: |
    chcp
    systeminfo
    powershell -Command get-psdrive -psprovider filesystem
    set

  setup_additional_packages_script: |
    REM choco install -y --no-progress ...


task:
  <<: *windows_template
  name: Windows - Server 2019, VS 2019 - Meson & ninja
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*wdocs.*'

  meson_install_wraps_script: |
    mkdir subprojects
    meson wrap install lz4
    meson wrap install zlib

  get_pathdirs_script: |
    meson setup --backend ninja build
    meson install -C build
    ls c:/usr/local/pgsql || true
    ls c:/usr/local/pgsql/share || true
    rm -rf build

    meson setup build --backend ninja --prefix=%cd%/install
    meson install -C build
    ls ./install/ || true
    ls ./install/share/ || true

  # test_all_script: |
  #   vcvarsall x64

  #   meson setup build --prefix=%cd%/install
  #   cd build/
  #   ninja
  #   ninja install
  #   meson test

  #   ../install/bin/initdb -D ../data
  #   ../install/bin/pg_ctl -D ../data/ -l logfile start
  #   ../install/bin/psql -d postgres -c "CREATE TABLE hello (world text);"
  #   ../install/bin/pg_ctl -D ../data/ stop

  #   rm -rf ../data/ ../install/ ../build/ logfile
  #   cd ../

  #   meson setup build --prefix=%cd%/install --buildtype=debug
  #   meson configure -Dcassert=true build
  #   meson install -C build
  #   meson test --list -C build

  #   meson test postgresql:setup / tmp_install -C build
  #   meson test recovery/001_stream_rep -C build

  #   meson test --suite setup --suite regress -C build

  # # Use /DEBUG:FASTLINK to avoid high memory usage during linking
  # configure_script: |
  #   vcvarsall x64
  #   meson setup --backend ninja --buildtype debug -Dc_link_args=/DEBUG:FASTLINK -Dcassert=true -Db_pch=true -Dssl=openssl -Dextra_lib_dirs=c:\openssl\1.1\lib -Dextra_include_dirs=c:\openssl\1.1\include -DTAR=c:/windows/system32/tar.exe -DPG_TEST_EXTRA="%PG_TEST_EXTRA%" build

  # build_script: |
  #   vcvarsall x64
  #   ninja -C build

  # check_world_script: |
  #   vcvarsall x64
  #   meson test %MTEST_ARGS% --num-processes %TEST_JOBS%

  on_failure:
    <<: *on_failure_meson
    crashlog_artifacts:
      path: "crashlog-*.txt"
      type: text/plain


task:
  <<: *windows_template
  name: Windows - Server 2019, VS 2019 - Meson & msbuild

  meson_install_wraps_script: |
    mkdir subprojects
    meson wrap install lz4
    meson wrap install zlib

  configure_script: |
    vcvarsall x64
    meson setup --buildtype debug --backend vs -Dcassert=true -Db_pch=true -Dssl=openssl -Dlz4=enabled -Dzlib=enabled -Dextra_lib_dirs=c:\openssl\1.1\lib -Dextra_include_dirs=c:\openssl\1.1\include -DTAR=c:/windows/system32/tar.exe -DPG_TEST_EXTRA="%PG_TEST_EXTRA%" build

  build_script: |
    vcvarsall x64
    msbuild %MSBFLAGS% build\postgresql.sln

  check_world_script: |
    vcvarsall x64
    meson test %MTEST_ARGS% --num-processes %TEST_JOBS%

  on_failure:
    <<: *on_failure_meson
    crashlog_artifacts:
      path: "crashlog-*.txt"
      type: text/plain


task:
  <<: *windows_template
  name: Windows - Server 2019, VS 2019 - Homegrown

  env:
    # Our windows infrastructure doesn't have test concurrency above the level
    # of a single vcregress test target. Due to that, it's useful to run prove
    # with multiple jobs. For the other tasks it isn't, because two sources
    # (make and prove) of concurrency can overload machines.
    #
    # The concrete choice of 10 is based on a small bit of experimentation and
    # likely can be improved upon further.
    PROVE_FLAGS: -j10 --timer

  configure_script:
    # copy errors out when using forward slashes
    - copy src\tools\ci\windows_build_config.pl src\tools\msvc\config.pl
    - vcvarsall x64
    - perl src/tools/msvc/mkvcbuild.pl
  build_script:
    - vcvarsall x64
    - msbuild %MSBFLAGS% pgsql.sln
  tempinstall_script:
    # Installation on windows currently only completely works from src/tools/msvc
    - cd src/tools/msvc && perl install.pl %CIRRUS_WORKING_DIR%/tmp_install

  test_regress_parallel_script: |
    %T_C% perl src/tools/msvc/vcregress.pl check parallel
  startcreate_script: |
    rem paths to binaries need backslashes
    tmp_install\bin\pg_ctl.exe initdb -D tmp_check/db -l tmp_check/initdb.log --options=--no-sync
    echo include '%TEMP_CONFIG%' >> tmp_check/db/postgresql.conf
    tmp_install\bin\pg_ctl.exe start -D tmp_check/db -l tmp_check/postmaster.log

  test_pl_script: |
    %T_C% perl src/tools/msvc/vcregress.pl plcheck
  test_isolation_script: |
    %T_C% perl src/tools/msvc/vcregress.pl isolationcheck
  test_modules_script: |
    %T_C% perl src/tools/msvc/vcregress.pl modulescheck
  test_contrib_script: |
    %T_C% perl src/tools/msvc/vcregress.pl contribcheck
  stop_script: |
    tmp_install\bin\pg_ctl.exe stop -D tmp_check/db -l tmp_check/postmaster.log
  test_ssl_script: |
    set with_ssl=openssl
    %T_C% perl src/tools/msvc/vcregress.pl taptest ./src/test/ssl/
  test_subscription_script: |
    %T_C% perl src/tools/msvc/vcregress.pl taptest ./src/test/subscription/
  test_authentication_script: |
    %T_C% perl src/tools/msvc/vcregress.pl taptest ./src/test/authentication/
  test_recovery_script: |
    %T_C% perl src/tools/msvc/vcregress.pl recoverycheck
  test_bin_script: |
    %T_C% perl src/tools/msvc/vcregress.pl bincheck
  test_ecpg_script: |
    rem tries to build additional stuff
    vcvarsall x64
    rem References ecpg_regression.proj in the current dir
    cd src/tools/msvc
    %T_C% perl vcregress.pl ecpgcheck

  on_failure:
    <<: *on_failure_ac
    crashlog_artifacts:
      path: "crashlog-*.txt"
      type: text/plain


task:
  name: CompilerWarnings

  # To limit unnecessary work only run this once the normal linux test succeeds
  depends_on:
    - Linux - Debian Bullseye - Meson

  env:
    CPUS: 4
    BUILD_JOBS: 4

    # Use larger ccache cache, as this task compiles with multiple compilers /
    # flag combinations
    CCACHE_MAXSIZE: "1GB"
    CCACHE_DIR: "/tmp/ccache_dir"

    LINUX_CONFIGURE_FEATURES: *LINUX_CONFIGURE_FEATURES
    LINUX_MESON_FEATURES: *LINUX_MESON_FEATURES

  # task that did not run, count as a success, so we need to recheck Linux'
  # condition here ...
  only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\nci-os-only:.*' || $CIRRUS_CHANGE_MESSAGE =~ '.*\nci-os-only:[^\n]*linux.*'

  container:
    image: $CONTAINER_REPO/linux_debian_bullseye_ci:latest
    cpu: $CPUS

  sysinfo_script: |
    id
    uname -a
    cat /proc/cmdline
    ulimit -a -H && ulimit -a -S
    gcc -v
    clang -v
    export

  ccache_cache:
    folder: $CCACHE_DIR

  ccache_stats_start_script:
    ccache -s
    ccache -z

  setup_additional_packages_script: |
    #apt-get update
    #DEBIAN_FRONTEND=noninteractive apt-get -y install ...

  ###
  # Test that code can be built with gcc/clang without warnings
  ###

  # Trace probes have a history of getting accidentally broken. Use the
  # different compilers to build with different combinations of dtrace on/off
  # and cassert on/off.

  # gcc, cassert off, dtrace on
  always:
    gcc_warning_script: |
      mkdir build-gcc && cd build-gcc
      CC="ccache gcc" CXX="ccache g++" \
        meson setup \
          -Dwerror=true \
          -Dcassert=false \
          -Ddtrace=enabled \
          ${LINUX_MESON_FEATURES} \
          ..
      time ninja -j${BUILD_JOBS}

  # gcc, cassert on, dtrace off
  always:
    gcc_a_warning_script: |
      cd build-gcc
      meson configure \
        -Dcassert=true \
        -Ddtrace=disabled
      time ninja -j${BUILD_JOBS}

  # clang, cassert off, dtrace off
  always:
    clang_warning_script: |
      mkdir build-clang && cd build-clang
      CC="ccache clang" CXX="ccache clang++" \
        meson setup \
          -Dwerror=true \
          -Dcassert=false \
          -Ddtrace=disabled \
          ${LINUX_MESON_FEATURES} \
          ..
      time ninja -j${BUILD_JOBS}

  # clang, cassert on, dtrace on
  always:
    clang_a_warning_script: |
      cd build-clang
      meson configure \
        -Dcassert=true \
        -Ddtrace=enabled
      time ninja -j${BUILD_JOBS}

  # cross-compile to windows
  always:
    mingw_cross_warning_script: |
      mkdir build-w64 && cd build-w64
      meson setup \
        --cross-file=../src/tools/ci/linux-mingw-w64-64bit.txt \
        -Dwerror=true \
        -Dcassert=true \
        ..
      time ninja -j${BUILD_JOBS}

  ###
  # Verify docs can be built
  ###
  # XXX: Only do this if there have been changes in doc/ since last build
  always:
    docs_build_script: |
      cd build-gcc
      time ninja docs

  ###
  # Verify headerscheck / cpluspluscheck succeed
  #
  # - Don't use ccache, the files are uncacheable, polluting ccache's
  #   cache
  # - Use -fmax-errors, as particularly cpluspluscheck can be very verbose
  # - XXX have to disable ICU to avoid errors:
  #   https://postgr.es/m/20220323002024.f2g6tivduzrktgfa%40alap3.anarazel.de
  ###
  always:
    headers_headerscheck_script: |
      mkdir build-ac && cd build-ac
      time ../configure \
        ${LINUX_CONFIGURE_FEATURES} \
        --without-icu \
        --quiet \
        CC="gcc" CXX="g++" CLANG="clang"
      make -s -j${BUILD_JOBS} world-bin
      time make -s headerscheck EXTRAFLAGS='-fmax-errors=10'
    headers_cpluspluscheck_script: |
      cd build-ac
      time make -s cpluspluscheck EXTRAFLAGS='-fmax-errors=10'

  always:
    ccache_stats_end_script:
      ccache -s
    upload_caches: ccache
