#!/usr/bin/env python3

import argparse
import re
import subprocess
import sys

parser = argparse.ArgumentParser(
    description='generate dependency file for docs')

parser.add_argument('--targetname', type=str, required=False, nargs='+')
parser.add_argument('--depfile', type=str, required=False)
parser.add_argument('--tool', type=str, required=True)

parser.add_argument('flags', nargs='*')

args = parser.parse_args()

if args.depfile:
    depfile_result_list = []

    command = [args.tool, '--load-trace'] + args.flags
    # --load-trace flag displays all the documents
    # loaded during the processing to stderr
    res = subprocess.run(command, stderr=subprocess.PIPE,
                         universal_newlines=True)
    # if exit code is different than 0, exit
    if res.returncode:
        exit(res.returncode)

    # get line start from targetname
    line_start = ''
    for name in args.targetname:
        line_start = line_start + name + ' '
    line_start = line_start.strip() + ': '

    # collect only file paths
    line_re = re.compile('^Loaded URL="([^"]+)"')
    with open(args.depfile, 'w') as f:
        for line in res.stderr.split('\n'):
            if line == '':
                continue
            m = re.match(line_re, line)

            # continue to show errors
            if m is None:
                print(line, file=sys.stderr)
                continue

            fname = m.group(1)
            if fname.startswith('http:'):
                continue
            if fname.startswith('file://'):
                fname = fname.split('file://')[1]
            f.write(line_start + fname + '\n')

else:
    command = [args.tool] + args.flags
    res = subprocess.run(command)
    exit(res.returncode)
